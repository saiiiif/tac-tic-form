{"version":3,"sources":["app.js","admin/adminController.js","clients/clientFactory.js","comments/commentFactory.js","projects/estimateFactory.js","projects/projectController.js","projects/projectFactory.js","reports/dashboardController.js","reports/reportController.js","users/userController.js","users/userFactory.js","timeEntry/timeEntryFact.js"],"names":[],"mappingsrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACphDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["var myApp = angular.module('myApp', [\r\n    'ngRoute',\r\n    'ngCookies',\r\n    'oi.select',\r\n    '720kb.datepicker',\r\n    'chart.js',\r\n    'angular.snackbar',\r\n    'angular-loading-bar',\r\n    'textAngular'\r\n]);\r\n\r\nmyApp.run(['userFactory', '$cookies', function(userFactory, $cookies) {\r\n    if ($cookies.get('userObj') === undefined) {\r\n        userFactory.getUserObj().success(function(response) {\r\n            console.log('created user object', response);\r\n            $cookies.putObject('userObj', response);\r\n        });\r\n    }\r\n}]);\r\n\r\nmyApp.filter('unsafe', function($sce) {\r\n    return $sce.trustAsHtml;\r\n});\r\n\r\nmyApp.controller('globalController', ['$scope', '$location',\r\n    function($scope, $location) {\r\n        angular.extend($scope, {\r\n            reportTabUrl: '/templates/manager/reportTabs.html',\r\n            singleProjectTab: '/templates/projects/singleProjectTab.html',\r\n            checkActiveLink: function(currLink) {\r\n                if ($location.path() == currLink) {\r\n                    return 'active';\r\n                }\r\n            },\r\n            timeAgo: function(string) {\r\n                return moment(string).fromNow();\r\n            }\r\n        })\r\n    }\r\n]);\r\n\r\n/*Routes*/\r\nmyApp.config(['$routeProvider', '$locationProvider',\r\n    function($routeProvider, $locationProvider) {\r\n        $routeProvider.when('/', {\r\n            templateUrl: '/templates/manager/managerReports.html',\r\n            controller: 'dashboardController'\r\n        });\r\n\r\n        $routeProvider.when('/logout', {\r\n            templateUrl: '/templates/users/user-logout.html',\r\n            controller: 'userController'\r\n        });\r\n\r\n        $routeProvider.when('/report', {\r\n            templateUrl: '/templates/manager/reports.html',\r\n            controller: 'reportController'\r\n        });\r\n\r\n        $routeProvider.when('/projects', {\r\n            templateUrl: '/templates/projects/projects-listing.html',\r\n            controller: 'projectController',\r\n            resolve: {\r\n                action: function(projectFactory) {\r\n                    return {\r\n                        projects: projectFactory.getProjectList()\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        $routeProvider.when('/projects/add', {\r\n            templateUrl: '/templates/projects/add-project.html',\r\n            controller: 'projectController',\r\n            resolve: {\r\n                action: function(clientFactory) {\r\n                    return {\r\n                        clients: clientFactory.getClientList()\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        $routeProvider.when('/projects/:id', {\r\n            templateUrl: '/templates/projects/projects-details.html',\r\n            controller: 'projectController',\r\n            resolve: {\r\n                action: function() {\r\n                    return 'single';\r\n                }\r\n            }\r\n        });\r\n\r\n        $routeProvider.when('/projects/:pid/comments', {\r\n            templateUrl: '/templates/projects/project-comments.html',\r\n            controller: 'projectController',\r\n            resolve: {\r\n                action: function(commentFactory, $route) {\r\n                    return {\r\n                        comments: commentFactory.getProjectComments($route.current.params.pid)\r\n                    };\r\n                }\r\n            }\r\n        });\r\n\r\n        $routeProvider.when('/projects/:id/estimate/add', {\r\n            templateUrl: '/templates/projects/project-estimate-add.html',\r\n            controller: 'projectController',\r\n            resolve: {\r\n                action: function() {\r\n                    return 'single';\r\n                }\r\n            }\r\n        });\r\n\r\n        $routeProvider.when('/projects/estimate/:estimateId', {\r\n            templateUrl: '/templates/projects/estimate-edit.html',\r\n            controller: 'projectController',\r\n            resolve: {\r\n                action: function() {\r\n                    return 'single';\r\n                }\r\n            }\r\n        });\r\n\r\n        /*Management URLs*/\r\n        $routeProvider.when('/manage/back-date-entry', {\r\n            templateUrl: '/templates/admin/backdateentry.html',\r\n            controller: 'adminController',\r\n            resolve: {\r\n                action: function(userFactory, timeEntry) {\r\n                    return {\r\n                        users: userFactory.getUserList(),\r\n                        allEntries: timeEntry.getBackDateEntries()\r\n                    };\r\n                }\r\n            }\r\n        });\r\n\r\n        $routeProvider.when('/manage/view-back-date-entry/:backdateentryId', {\r\n            templateUrl: '/templates/admin/view-backdateentry.html',\r\n            controller: 'adminController',\r\n            resolve: {\r\n                action: function(userFactory, timeEntry,$route) {\r\n                    return {\r\n                        singleBackDateEntry: timeEntry.getBackDateEntriesById($route.current.params.backdateentryId)\r\n                    };\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        $routeProvider.when('/user/request-backdate-entry', {\r\n            templateUrl: '/templates/users/request-backdate.html',\r\n            controller: 'userController',\r\n            resolve: {\r\n                action: function(userFactory, timeEntry) {\r\n                    return {\r\n                        users: userFactory.getUserListByRole(),\r\n                        allEntries: timeEntry.getRequestBackDateEntries()\r\n                    };\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n        $routeProvider.when('/user/view-request-backdate/:backdateentryId', {\r\n            templateUrl: '/templates/users/view-request-backdate.html',\r\n            controller: 'userController',\r\n            resolve: {\r\n                action: function(userFactory, timeEntry,$route) {\r\n                    return {\r\n                        singleRequestBackdateEntry: timeEntry.getRequestBackDateEntriesById($route.current.params.backdateentryId)\r\n\r\n                    };\r\n                }\r\n            }\r\n        });\r\n        $routeProvider.otherwise('/');\r\n    }\r\n]);\r\n","myApp.controller('adminController', ['$scope', 'action', 'timeEntry','$routeParams', '$location', 'snackbar',\r\n    function($scope, action, timeEntry,$routeParams ,$location, snackbar) {\r\n\r\n        /*check if users are loaded*/\r\n        if (action && action.users != undefined) {\r\n            action.users.success(function(response) {\r\n                console.log('all users', response);\r\n                $scope.users = response;\r\n            });\r\n        }\r\n\r\n        if (action && action.allEntries != undefined) {\r\n            window.document.title = 'Backdate entry';\r\n\r\n            action.allEntries.success(function(response) {\r\n                if (response.length != 0) {\r\n                    console.log('all Entries', response.length);\r\n                    $scope.allEntries = response;\r\n                    $scope.showEntries = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (action && action.singleBackdateEntry != undefined) {\r\n\r\n            action.singleBackdateEntry.success(function(response) {\r\n                if (response.length != 0) {\r\n                    console.log('Single Backdate Entry ', response.length);\r\n                    $scope.singleBackdateEntry = response;\r\n                }\r\n            });\r\n        }\r\n\r\n        /*Variables*/\r\n        angular.extend($scope, {\r\n            backdateEntry: {},\r\n            allEntries: {},\r\n            singleBackdateEntry: {},\r\n            showEntries: false\r\n        });\r\n\r\n        /*Methods*/\r\n        angular.extend($scope, {\r\n            backdateEntrySubmit: function(backdateEntryForm) {\r\n                if (backdateEntryForm.$valid) {\r\n                    /*get all the user ids*/\r\n                    var userIds = [];\r\n                    if ($scope.backdateEntry != undefined) {\r\n                        angular.forEach($scope.backdateEntry.users, function(value, key) {\r\n                            userIds.push(value.id);\r\n                        });\r\n                    }\r\n\r\n                    /*create the post data*/\r\n                    var entryData = {\r\n                        date: $scope.backdateEntry.backdate,\r\n                        users: userIds,\r\n                        comment: $scope.backdateEntry.reason\r\n                    };\r\n\r\n                    timeEntry.saveBackDateEntry(entryData).success(function(response) {\r\n                        console.log('backdate entries', response);\r\n                        $scope.allEntries = response;\r\n                        $scope.backdateEntry = {};\r\n                        $scope.showEntries = true;\r\n                        snackbar.create(\"Entry added and mail sent.\", 1000);\r\n                    });\r\n                }\r\n            },\r\n            deleteBackDate: function() {\r\n                var r = confirm(\"This will delete the backdate entry . Ok?\");\r\n                if (r === true) {\r\n                    timeFactory.deleteBackDate($routeParams.id).success(function(response) {\r\n                        $location.path('/manage/back-date-entry');\r\n                        snackbar.create(\"Backdate deleted\", 1000);\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n]);\r\n","myApp.factory('clientFactory', ['$http', function($http) {\r\n    var clientFactory = {};\r\n\r\n    clientFactory.getClientList = function() {\r\n        return $http.get(baseUrl + 'api/get-client-list');\r\n    }\r\n\r\n    return clientFactory;\r\n}]);\r\n","/**\r\n * Created by amitav on 12/13/15.\r\n */\r\nmyApp.factory('commentFactory', ['$http', function($http) {\r\n    var commentFactory = {};\r\n\r\n    commentFactory.getProjectComments = function(projectId) {\r\n        console.log('Project id', projectId);\r\n        return $http.get(baseUrl + 'api/get-project-comments/' + projectId);\r\n    }\r\n\r\n    commentFactory.saveComment = function (commentData) {\r\n        return $http({\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            url: baseUrl + 'api/save-project-comment',\r\n            method: 'POST',\r\n            data: commentData\r\n        });\r\n    }\r\n\r\n    return commentFactory;\r\n}]);\r\n","myApp.factory('estimateFactory', ['$http', function($http) {\r\n    var estimateFactory = {};\r\n\r\n    estimateFactory.getEstimateById = function(id) {\r\n        return $http.get(baseUrl + 'api/get-estimate-by-id/' + id);\r\n    }\r\n\r\n    estimateFactory.updateEstimate = function(estimateData) {\r\n        return $http({\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            url: baseUrl + 'api/update-estimate-by-id',\r\n            method: 'POST',\r\n            data: estimateData\r\n        });\r\n    }\r\n\r\n    return estimateFactory;\r\n}])\r\n","myApp.controller('projectController', ['$scope', 'projectFactory', '$routeParams', 'snackbar', '$location', 'action', 'clientFactory', 'estimateFactory', 'timeEntry', 'commentFactory',\r\n\r\n    function($scope, projectFactory, $routeParams, snackbar, $location, action, clientFactory, estimateFactory, timeEntry, commentFactory) {\r\n\r\n        /*loading all projects*/\r\n        if (action && action.projects != undefined) {\r\n            action.projects.success(function(response) {\r\n                console.log('all projects', response);\r\n                $scope.projects = response;\r\n            });\r\n        }\r\n\r\n        if (action && action.clients != undefined) {\r\n            action.clients.success(function(response) {\r\n                console.log('all clients', response);\r\n                $scope.clients = response;\r\n            });\r\n        }\r\n\r\n        /*Loading the comments for a project*/\r\n        if (action && action.comments != undefined) {\r\n            $scope.singleProjectId = $routeParams.pid;\r\n            action.comments.success(function(response) {\r\n                console.log('all comments', response);\r\n                $scope.singleProject = response;\r\n                $scope.comments = response;\r\n            });\r\n        }\r\n\r\n        /*load single project data*/\r\n        if ($routeParams.id) {\r\n            $scope.singleProjectId = $routeParams.id;\r\n            projectFactory.getProjectById($routeParams.id).success(function(response) {\r\n                console.log('Single project', response);\r\n                $scope.singleProject = response;\r\n                $scope.singleProject.hours_allocated = 0;\r\n                $scope.singleProject.hours_consumed = 0;\r\n\r\n                angular.forEach(response.estimates, function(estimate, key) {\r\n                    $scope.singleProject.hours_allocated += estimate.hours_allocated;\r\n                    $scope.singleProject.hours_consumed += estimate.hours_consumed;\r\n                });\r\n\r\n                $scope.singleProject.percent_complete = $scope.singleProject.hours_consumed / $scope.singleProject.hours_allocated * 100;\r\n                $scope.singleProject.percent_complete = parseFloat($scope.singleProject.percent_complete).toFixed(2);\r\n\r\n                $scope.showSingleProject = true;\r\n            });\r\n        }\r\n\r\n        /*When looking at an individual estimate*/\r\n        if ($routeParams.estimateId) {\r\n            /*Get the estimate details by id*/\r\n            estimateFactory.getEstimateById($routeParams.estimateId).success(function(response) {\r\n                console.log('Need to load estimate', response);\r\n                $scope.singleEstimate = response;\r\n\r\n                /*Get the project details by id*/\r\n                projectFactory.getProjectById(response.project_id).success(function(response) {\r\n                    console.log('Single project', response);\r\n                    $scope.singleProject = response;\r\n                    $scope.showSingleEstimate = true;\r\n\r\n                    /*Get time entries for the estimate*/\r\n                    timeEntry.getEntriesForEstimate($scope.singleEstimate.id).success(function(response) {\r\n                        $scope.estimateTimes = response;\r\n                        $scope.estimateTimes.total = 0;\r\n                        angular.forEach(response, function(estimate, key) {\r\n                            $scope.estimateTimes.total += estimate.time;\r\n                        });\r\n\r\n                        $scope.estimateTimes.total = parseFloat($scope.estimateTimes.total).toPrecision(2);\r\n                        console.log('Time entries', response);\r\n                    });\r\n                });\r\n            });\r\n        }\r\n\r\n        angular.extend($scope, {\r\n            singleProject: {},\r\n            showSingleProject: false,\r\n            showSingleEstimate: false,\r\n            newEstimateFormSubmit: false,\r\n            projectEstimte: {},\r\n            singleEstimate: {},\r\n            newProject: {}\r\n        });\r\n\r\n        angular.extend($scope, {\r\n            saveComment: function(addCommentForm) {\r\n                if (addCommentForm.$valid) {\r\n                    console.log($scope.newComment, $routeParams.pid);\r\n                    var commentData = {\r\n                        comment: $scope.newComment,\r\n                        project_id: $routeParams.pid\r\n                    };\r\n                    commentFactory.saveComment(commentData).success(function(response) {\r\n                        console.log(response);\r\n                        $scope.singleProject = response;\r\n                        $scope.comments = response;\r\n                        $scope.newComment = \"\";\r\n                    });\r\n                } else {\r\n                    $scope.newEstimateFormSubmit = true;\r\n                    snackbar.create(\"Your form has errors!!\", 1000);\r\n                }\r\n            },\r\n            deleteProject: function() {\r\n                var r = confirm(\"This will delete the project and it's time. Ok?\");\r\n                if (r === true) {\r\n                    projectFactory.deleteProject($routeParams.id).success(function(response) {\r\n                        $location.path('/projects');\r\n                        snackbar.create(\"Project deleted\", 1000);\r\n                    });\r\n                }\r\n            },\r\n            editEstiate: function(editEstimateForm) {\r\n                if (editEstimateForm.$valid) {\r\n                    var estimateData = {\r\n                        id: $scope.singleEstimate.id,\r\n                        desc: $scope.singleEstimate.desc,\r\n                        hours_allocated: $scope.singleEstimate.hours_allocated,\r\n                        status: $scope.singleEstimate.status\r\n                    };\r\n\r\n                    estimateFactory.updateEstimate(estimateData).success(function(response) {\r\n                        console.log('estimate edited', response);\r\n                        $location.path('/projects/' + $scope.singleProject.id);\r\n                        snackbar.create(\"Estimate saved\", 1000);\r\n                    });\r\n                } else {\r\n                    $scope.newEstimateFormSubmit = true;\r\n                    snackbar.create(\"Your form has errors!!\", 1000);\r\n                }\r\n            },\r\n            addNewProject: function(addProjectForm) {\r\n                if (addProjectForm.$valid) {\r\n                    console.log($scope.newProject);\r\n                    var newProjectData = {\r\n                        name: $scope.newProject.name,\r\n                        client: $scope.newProject.client_id[0].id\r\n                    };\r\n                    projectFactory.saveNewProject(newProjectData).success(function(response) {\r\n                        console.log('save new project', response);\r\n                        $location.path('/projects');\r\n                        snackbar.create(\"Project added\", 1000);\r\n                    })\r\n                } else {\r\n                    $scope.newEstimateFormSubmit = true;\r\n                    snackbar.create(\"Your form has errors!!\", 1000);\r\n                }\r\n            },\r\n            saveProjectEstimate: function(addProjectEstimateForm) {\r\n                if (addProjectEstimateForm.$valid) {\r\n                    console.log('$scope.projectEstimte', $scope.projectEstimte);\r\n                    var estimateData = {\r\n                        project_id: $routeParams.id,\r\n                        desc: $scope.projectEstimte.desc,\r\n                        hours_allocated: $scope.projectEstimte.hours_allocated,\r\n                    };\r\n\r\n                    projectFactory.saveProjectEstimate(estimateData).success(function(response) {\r\n                        console.log(response);\r\n                        $location.path('/projects/' + $routeParams.id);\r\n                        snackbar.create(\"Estimate added\", 1000);\r\n                    });\r\n                } else {\r\n                    $scope.newEstimateFormSubmit = true;\r\n                    snackbar.create(\"Your form has errors!!\", 1000);\r\n                }\r\n            }\r\n        });\r\n    }\r\n]);\r\n","myApp.factory('projectFactory', ['$http', function($http) {\r\n    var projectFactory = {};\r\n\r\n    projectFactory.getProjectList = function() {\r\n        return $http.get(baseUrl + 'api/get-project-list');\r\n    }\r\n\r\n    projectFactory.getProjectById = function(id) {\r\n        return $http.get(baseUrl + 'api/get-project-by-id/' + id);\r\n    }\r\n\r\n    projectFactory.saveProjectEstimate = function(estimateData) {\r\n        return $http({\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            url: baseUrl + 'api/save-project-estimate',\r\n            method: 'POST',\r\n            data: estimateData\r\n        });\r\n    }\r\n\r\n    projectFactory.saveNewProject = function(newProjectData) {\r\n        return $http({\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            url: baseUrl + 'api/save-new-project',\r\n            method: 'POST',\r\n            data: newProjectData\r\n        });\r\n    }\r\n\r\n    projectFactory.deleteProject = function(id) {\r\n        return $http({\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            url: baseUrl + 'api/delete-project',\r\n            method: 'POST',\r\n            data: {\r\n                id: id\r\n            }\r\n        });\r\n    }\r\n\r\n    return projectFactory;\r\n}]);\r\n","myApp.controller('dashboardController', ['$scope', 'timeEntry', '$parse',\r\n    function($scope, timeEntry, $parse) {\r\n        timeEntry.getTimeSheetEntryByDate().success(function(response) {\r\n            $scope.timeEntryOverview = response;\r\n        });\r\n\r\n        angular.extend($scope, {\r\n            graphLabels: {}\r\n        });\r\n\r\n        angular.extend($scope, {\r\n            changeTag: function(url) {\r\n                $scope.tabUrl = url;\r\n            }\r\n        });\r\n\r\n        $scope.labels = [\"Download Sales\", \"In-Store Sales\", \"Mail-Order Sales\"];\r\n        $scope.data = [300, 500, 100];\r\n    }\r\n]);\r\n","myApp.controller('reportController', ['$scope', 'timeEntry', '$timeout', 'projectFactory', 'userFactory',\r\n    function($scope, timeEntry, $timeout, projectFactory, userFactory) {\r\n\r\n        timeEntry.getEntries().then(function(response) {\r\n                console.log('time entries', response.data);\r\n                $scope.timeEntries = response.data;\r\n                angular.forEach(response.data, function(value, key) {\r\n                    $scope.totalTime = $scope.totalTime + value.time;\r\n                });\r\n                return response;\r\n            })\r\n            .then(function() {\r\n                userFactory.getUserList().then(function(response) {\r\n                    console.log('user list', response.data);\r\n                    angular.forEach(response.data, function(value, key) {\r\n                        $scope.users.push(value);\r\n                    });\r\n                });\r\n            })\r\n            .then(function() {\r\n                projectFactory.getProjectList().then(function(response) {\r\n                    console.log('project list', response.data);\r\n                    angular.forEach(response.data, function(value, key) {\r\n                        $scope.projects.push(value);\r\n                    });\r\n\r\n                    $timeout(function() {\r\n                        $scope.showData = true;\r\n                    }, 500);\r\n                });\r\n            });\r\n\r\n        angular.extend($scope, {\r\n            totalTime: 0,\r\n            showData: false,\r\n            filters: {},\r\n            users: [],\r\n            projects: [],\r\n            dt: new Date()\r\n        });\r\n\r\n        angular.extend($scope, {\r\n            filterTime: function(filterTimeFrm) {\r\n                console.log($scope.filters);\r\n                var queryParams = {};\r\n\r\n                if ($scope.filters.desc != \"\") {\r\n                    queryParams.desc = $scope.filters.desc;\r\n                }\r\n\r\n                if ($scope.filters.users !== undefined && $scope.filters.users.length > 0) {\r\n                    queryParams.users = [];\r\n                    angular.forEach($scope.filters.users, function(value, key) {\r\n                        queryParams.users.push(value.id);\r\n                    });\r\n                }\r\n\r\n                if ($scope.filters.project !== undefined && $scope.filters.project.length > 0) {\r\n                    queryParams.projects = [];\r\n                    angular.forEach($scope.filters.project, function(value, key) {\r\n                        queryParams.projects.push(value.id);\r\n                    });\r\n                }\r\n\r\n                if ($scope.filters.startDate !== undefined) {\r\n                    queryParams.startDate = $scope.filters.startDate;\r\n                }\r\n\r\n                if ($scope.filters.endDate !== undefined) {\r\n                    queryParams.endDate = $scope.filters.endDate;\r\n                    var startDateOfYear = moment(queryParams.startDate).dayOfYear();\r\n                    var endDateOfYear = moment(queryParams.endDate).dayOfYear();\r\n\r\n                    console.log(startDateOfYear, endDateOfYear);\r\n\r\n                    if ($scope.filters.startDate !== undefined && endDateOfYear < startDateOfYear) {\r\n                        alert('End date is before start date.');\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                timeEntry.getSearchResult(queryParams).then(function(response) {\r\n                    console.log('search result', response.data);\r\n                    $scope.timeEntries = response.data;\r\n                    $scope.totalTime = 0;\r\n                    angular.forEach(response.data, function(value, key) {\r\n                        $scope.totalTime = $scope.totalTime + value.time;\r\n                    });\r\n                });\r\n            },\r\n            clearFilters: function() {\r\n                $scope.filters = {};\r\n            }\r\n        });\r\n    }\r\n]);\r\n","myApp.controller('userController', ['$scope','action', 'timeEntry', '$routeParams','$location', 'userFactory','snackbar', function($scope,  action, timeEntry,$routeParams,$location, userFactory,snackbar) {\r\n    if ($location.$$path == '/logout') {\r\n        userFactory.logoutUser().success(function(response) {\r\n            console.log('logout', response);\r\n            window.location = baseUrl;\r\n        });\r\n    }\r\n    /*check if users are loaded*/\r\n    if (action && action.users != undefined) {\r\n        action.users.success(function(response) {\r\n            console.log('all users', response);\r\n            $scope.users = response;\r\n        });\r\n    }\r\n\r\n    if (action && action.allEntries != undefined) {\r\n        window.document.title = 'Request Backdate entry';\r\n\r\n        action.allEntries.success(function(response) {\r\n            if (response.length != 0) {\r\n                console.log('all Entries', response.length);\r\n                $scope.allEntries = response;\r\n                $scope.showEntries = true;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    if (action && action.singleRequestBackdateEntry != undefined) {\r\n\r\n            action.singleRequestBackdateEntry.success(function(response) {\r\n                if (response.length != 0) {\r\n                    console.log('Single Request Backdate Entry ', response.length);\r\n                    $scope.singleRequestBackdateEntry = response;\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n        /*Variables*/\r\n    angular.extend($scope, {\r\n        requestBackdate: {},\r\n        allEntries: {},\r\n        singleRequestBackdateEntry: {},\r\n        showEntries: false\r\n    });\r\n\r\n    /*Methods*/\r\n    angular.extend($scope, {\r\n        requestBackdateSubmit: function(requestBackdateForm) {\r\n            if (requestBackdateForm.$valid) {\r\n                /*get all the user ids*/\r\n                var userIds = [];\r\n                if ($scope.requestBackdate != undefined) {\r\n                    angular.forEach($scope.requestBackdate.users, function(value, key) {\r\n                        userIds.push(value.id);\r\n                    });\r\n                }\r\n\r\n                /*create the post data*/\r\n                var entryData = {\r\n                    date: $scope.requestBackdate.backdate,\r\n                    users: userIds,\r\n                    comment: $scope.requestBackdate.reason\r\n                };\r\n\r\n                timeEntry.saveRequestBackDateEntry(entryData).success(function(response) {\r\n                    console.log('backdate entries', response);\r\n                    $scope.allEntries = response;\r\n                    $scope.requestBackdate = {};\r\n                    $scope.showEntries = true;\r\n                    snackbar.create(\"Entry added and mail sent.\", 1000);\r\n                });\r\n            }\r\n        },\r\n        deleteBackDateRequest: function() {\r\n            var r = confirm(\"This will delete the backdate request entry. Ok?\");\r\n            if (r === true) {\r\n                timeEntry.deleteBackDateRequest($routeParams.id).success(function(response) {\r\n                    $location.path('/user/request-backdate-entry');\r\n                    snackbar.create(\"Requested backdate deleted\", 1000);\r\n                });\r\n            }\r\n        }\r\n\r\n    });\r\n    \r\n}]);\r\n","myApp.factory('userFactory', ['$http', '$cookies',\r\n    function($http, $cookies) {\r\n        var userFactory = {};\r\n\r\n        userFactory.logoutUser = function() {\r\n            $cookies.remove('userObj');\r\n            return $http.get(baseUrl + 'logout');\r\n        }\r\n\r\n        userFactory.getUserList = function() {\r\n            return $http.get(baseUrl + 'api/get-user-list');\r\n        }\r\n\r\n        userFactory.getUserObj = function() {\r\n            return $http.get(baseUrl + 'api/get-user_data');\r\n        }\r\n\r\n        userFactory.getUserListByRole = function() {\r\n            /*Code for loading users by role id*/\r\n            var role = [1,3];\r\n            var jsonData=JSON.stringify(role);\r\n\r\n            return $http({\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                url: baseUrl + 'api/get-user-list-by-role',\r\n                method: 'POST',\r\n                data:  jsonData\r\n            });\r\n        }\r\n\r\n        return userFactory;\r\n    }\r\n]);\r\n","myApp.factory('timeEntry', ['$http', function($http) {\r\n    var timeEntry = {};\r\n\r\n    timeEntry.getEntries = function() {\r\n        return $http.get(baseUrl + 'api/time-report');\r\n    }\r\n\r\n    /*timeEntry.getUserList = function() {\r\n        return $http.get(baseUrl + 'api/get-user-list');\r\n    }*/\r\n\r\n    timeEntry.getSearchResult = function(filterParams) {\r\n        return $http({\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            url: baseUrl + 'api/time-report-filter',\r\n            method: 'POST',\r\n            data: filterParams\r\n        });\r\n    }\r\n\r\n    timeEntry.getTimeSheetEntryByDate = function() {\r\n        return $http.get(baseUrl + 'api/get-timeentry-by-date');\r\n    }\r\n\r\n    timeEntry.getEntriesForEstimate = function(estimateId) {\r\n        return $http.get(baseUrl + 'api/get-timeentry-for-estimate/' + estimateId);\r\n    }\r\n\r\n    timeEntry.getBackDateEntries = function() {\r\n        return $http.get(baseUrl + 'api/get-backdate-entries');\r\n    }\r\n\r\n    timeEntry.getBackDateEntriesById = function(id) {\r\n        return $http.get(baseUrl + 'api/get-backdate-entry/' + id);\r\n    }\r\n\r\n    timeEntry.saveBackDateEntry = function(entryData) {\r\n        return $http({\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            url: baseUrl + 'api/allow-backdate-entry',\r\n            method: 'POST',\r\n            data: entryData\r\n        });\r\n    }\r\n\r\n    timeEntry.getRequestBackDateEntries = function() {\r\n        return $http.get(baseUrl + 'api/get-request-backdate-entries');\r\n    }\r\n\r\n    timeEntry.getRequestBackDateEntriesById = function(id) {\r\n        return $http.get(baseUrl + 'api/get-request-backdate-entries-by-id/' + id);\r\n    }\r\n\r\n    timeEntry.saveRequestBackDateEntry = function(entryData) {\r\n        return $http({\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            url: baseUrl + 'api/allow-request-backdate-entry',\r\n            method: 'POST',\r\n            data: entryData\r\n        });\r\n    }\r\n    timeEntry.deleteBackDate = function(id) {\r\n        return $http({\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            url: baseUrl + 'api/delete-backdate',\r\n            method: 'POST',\r\n            data: {\r\n                id: id\r\n            }\r\n        });\r\n    }\r\n\r\n    timeEntry.deleteBackDateRequest = function(id) {\r\n        return $http({\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            url: baseUrl + 'api/delete-request-backdate',\r\n            method: 'POST',\r\n            data: {\r\n                id: id\r\n            }\r\n        });\r\n    }\r\n\r\n    return timeEntry;\r\n}]);\r\n"],"sourceRoot":"/source/"}